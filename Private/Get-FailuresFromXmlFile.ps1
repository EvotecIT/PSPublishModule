function Get-FailuresFromXmlFile {
    <#
    .SYNOPSIS
    Extract failure information from NUnit XML file

    .DESCRIPTION
    Internal function that processes NUnit XML test result files and extracts
    failure information for analysis.

    .PARAMETER Path
    Path to the NUnit XML test results file

    .PARAMETER FailureAnalysis
    Failure analysis object to populate with results

    .NOTES
    This is an internal function used by Get-ModuleTestFailures.
    Parses NUnit XML format typically generated by Pester.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string]$Path,

        [Parameter(Mandatory)]
        [PSCustomObject]$FailureAnalysis
    )

    try {
        [xml]$XmlResults = Get-Content -Path $Path -ErrorAction Stop
    } catch {
        throw "Failed to read or parse XML file '$Path': $($_.Exception.Message)"
    }

    $TestSuite = $XmlResults.'test-results'.'test-suite'
    if (-not $TestSuite -or -not $TestSuite.results) {
        throw "Invalid XML structure in test results file '$Path'"
    }

    # Extract test counts from XML attributes
    $FailureAnalysis.TotalCount = [int]($TestSuite.total -as [int])
    $FailureAnalysis.FailedCount = [int]($TestSuite.failures -as [int])
    $FailureAnalysis.PassedCount = $FailureAnalysis.TotalCount - $FailureAnalysis.FailedCount
    $FailureAnalysis.SkippedCount = [int]($TestSuite.inconclusive -as [int])

    # Process individual test cases
    foreach ($TestCase in $TestSuite.results.'test-case') {
        if ($TestCase.result -ne 'Success') {
            $ErrorMessage = 'No error message available'

            if ($TestCase.failure) {
                if ($TestCase.failure.message) {
                    if ($TestCase.failure.message.'#text') {
                        $ErrorMessage = $TestCase.failure.message.'#text'
                    } else {
                        $ErrorMessage = $TestCase.failure.message
                    }
                }
            }

            $FailureInfo = [PSCustomObject]@{
                Name         = $TestCase.name
                ErrorMessage = $ErrorMessage
                StackTrace   = if ($TestCase.failure -and $TestCase.failure.'stack-trace') { $TestCase.failure.'stack-trace' } else { $null }
                Duration     = if ($TestCase.time) { [TimeSpan]::FromSeconds([double]$TestCase.time) } else { $null }
            }
            $FailureAnalysis.FailedTests += $FailureInfo
        }
    }

    return $FailureAnalysis
}